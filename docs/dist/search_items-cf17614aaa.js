searchNodes=[{"doc":"Pagination for Ecto and Phoenix. Dissolver is the continuation and fork of the fine work kerosene Out of respect to the authors of kerosene I won&#39;t be publishing this on https://hex.pm/ untill and if this becomes the replacement for kerosene. Until then you will need to install this from github. Installation add Dissolver to your mix.exs dependencies: def deps do [ {:dissolver, github: &#39;MorphicPro/dissolver&#39;} ] end Next provide Dissolver your Repo module via the config. Add the following to your config: ... config :dissolver, repo: MyApp.Repo per_page: 2 import_config &quot;\#{Mix.env()}.exs&quot; For more information about the configuration options look at the Configurations section Now you are ready to start using Dissolver. Usage Start paginating your queries def index(conn, params) do {products, paginator} = Product |&gt; Product.with_lowest_price |&gt; Dissolver.paginate(params) render(conn, &quot;index.html&quot;, products: products, paginator: paginator) end Add the view helper to your view defmodule MyApp.ProductView do use MyApp.Web, :view import Dissolver.HTML end Generate the links using the view helper in your template &lt;%= paginate @conn, @paginator %&gt; Importing Dissolver.HTML provides your template access to Dissolver.HTML.paginate/3 as the prior example shows. The Dissolver.HTML.paginate/3 can take a host of options to aid the theme from how many links to show (window: integer) to what the link labels should read. By default the theme used to generate the html is the Dissolver.HTML.Simple theme. It will only provide the very basic prev|next buttons. For more theme options, including providing your own, read the following Configurations Configuration This module uses the following that can be set as globals in your config/config.ex configurations :repo - Required Your app&#39;s Ecto Repo :theme (default: Dissolver.HTML.Simple) - A module that implements the Dissolver.HTML.Theme behavior There are a few pre defiend theme modules found in dessolver/html/ Dissolver.HTML.Simple - This is the default with only previous | next links Dissolver.HTML.Bootstrap - A Bootstrap 4 theme Dissolver.HTML.Foundation - A Foundation theme Dissolver.HTML.Materialize - A Materialize theme Dissolver.HTML.Semantic - A Semantic UI theme Dissolver.HTML.Tailwind - A Tailwind CSS theme :per_page (default: 10) - The global per page setting :max_page - The limit of pages allow to navigate regardless of total pages found This option is ignored if not provided and defaults to total pages found in the query. :lazy (default: false) - This option if enabled will result in all Dissolver.paginate/3 calls return an Ecto.Query rather than call Repo.all. This is useful for when you need to paginate on an association via a preload. TODO: provide example. ##","ref":"Dissolver.html","title":"Dissolver","type":"module"},{"doc":"","ref":"Dissolver.html#paginate/3","title":"Dissolver.paginate/3","type":"function"},{"doc":"An Html helper to render the pagination links, Start by importing the Dissolver.HTML in your view module. defmodule MyApp.ProductView do use MyApp.Web, :view import Dissolver.HTML end now you have the paginate/2 view helper in your template file. &lt;%= paginate @conn, @paginator %&gt; Where @page is a %Dissolver.Paginator{} struct returned from Dissolver.paginate/2. paginate helper takes keyword list of options and params. &lt;%= paginate @conn, @page, window: 5, next_label: &quot;&gt;&gt;&quot;, previous_label: &quot;&lt;&lt;&quot;, first: true, last: true, first_label: &quot;First&quot;, last_label: &quot;Last&quot; %&gt;","ref":"Dissolver.HTML.html","title":"Dissolver.HTML","type":"module"},{"doc":"Generates the HTML pagination links for a given page returned by Dissolver. Example: iex&gt; Dissolver.HTML.paginate(@conn, @dissolver) Path can be overriden by adding setting :path in the opts. For example: Dissolver.HTML.paginate(@conn, @dissolver, path: product_path(@conn, :index, foo: &quot;bar&quot;)) Additional panigation class can be added by adding setting :class in the opts. For example: Dissolver.HTML.paginate(@conn, @dissolver, theme: :boostrap4, class: &quot;paginate-sm&quot;)","ref":"Dissolver.HTML.html#paginate/3","title":"Dissolver.HTML.paginate/3","type":"function"},{"doc":"This is a theme to support Bootstrap4 https://getbootstrap.com/","ref":"Dissolver.HTML.Bootstrap.html","title":"Dissolver.HTML.Bootstrap","type":"module"},{"doc":"This is a theme to support Foundation https://get.foundation/","ref":"Dissolver.HTML.Foundation.html","title":"Dissolver.HTML.Foundation","type":"module"},{"doc":"This is a theme to support Materialize https://materializecss.com/","ref":"Dissolver.HTML.Materialize.html","title":"Dissolver.HTML.Materialize","type":"module"},{"doc":"This is a theme to support Semantic UI. https://semantic-ui.com/","ref":"Dissolver.HTML.Semantic.html","title":"Dissolver.HTML.Semantic","type":"module"},{"doc":"This is a simple nav theme","ref":"Dissolver.HTML.Simple.html","title":"Dissolver.HTML.Simple","type":"module"},{"doc":"This is a theme to support Tailwind css. https://tailwindcss.com/","ref":"Dissolver.HTML.Tailwind.html","title":"Dissolver.HTML.Tailwind","type":"module"},{"doc":"This is a behavior for implementing a custom Dissolver.HTML.Theme","ref":"Dissolver.HTML.Theme.html","title":"Dissolver.HTML.Theme","type":"behaviour"},{"doc":"","ref":"Dissolver.HTML.Theme.html#c:generate_links/2","title":"Dissolver.HTML.Theme.generate_links/2","type":"callback"},{"doc":"JSON helpers to render the pagination links in json format. import the Dissolver.JSON in your view module. defmodule MyApp.ProductView do use MyApp.Web, :view import Dissolver.JSON def render(&quot;index.json&quot;, %{conn: conn, products: products, dissolver: dissolver}) do %{data: render_many(products, MyApp.ProductView, &quot;product.json&quot;), pagination: paginate(conn, dissolver)} end end Where dissolver is a %Dissolver{} struct returned from Dissolver.paginate/2. paginate helper takes keyword list of options. paginate(dissolver, window: 5, next_label: &quot;&gt;&gt;&quot;, previous_label: &quot;&lt;&lt;&quot;, first: true, last: true, first_label: &quot;First&quot;, last_label: &quot;Last&quot;)","ref":"Dissolver.JSON.html","title":"Dissolver.JSON","type":"module"},{"doc":"","ref":"Dissolver.JSON.html#paginate/3","title":"Dissolver.JSON.paginate/3","type":"function"},{"doc":"","ref":"Dissolver.JSON.html#render_page_list/1","title":"Dissolver.JSON.render_page_list/1","type":"function"},{"doc":"This module is responsible for building the struct used for navigating to the respective pages of a given query The HTML and JSON view helper will call into this module calling the paginate/3 passing the Plug.Conn, along with a Hydrated version of this struct.","ref":"Dissolver.Paginator.html","title":"Dissolver.Paginator","type":"module"},{"doc":"","ref":"Dissolver.Paginator.html#build_options/1","title":"Dissolver.Paginator.build_options/1","type":"function"},{"doc":"TODO:","ref":"Dissolver.Paginator.html#paginate/3","title":"Dissolver.Paginator.paginate/3","type":"function"},{"doc":"","ref":"Dissolver.Paginator.html#t:t/0","title":"Dissolver.Paginator.t/0","type":"type"},{"doc":"","ref":"Dissolver.Query.html","title":"Dissolver.Query","type":"module"},{"doc":"","ref":"Dissolver.Query.html#limit/1","title":"Dissolver.Query.limit/1","type":"function"},{"doc":"","ref":"Dissolver.Query.html#offset/1","title":"Dissolver.Query.offset/1","type":"function"},{"doc":"Dissolver NOTE: This is a wip repo. It&#39;s not currently in working order and has many bugs. This project is a fork of https://github.com/elixirdrops/kerosene.I thought to take it over because it does not look as if its being activly developed and I think there is some more work needed before it&#39;s a release canidate. My hope is to refactor the code and tests to better the over all code quality as well as offer some needed features. The two first new features will include: Lazy query - Instead of pagination calling Repo.all it will return an Ecto query. This is useful for subqueries where you will passying the query to something like a preload. Custom themes - Now you can pass a module as the source of your theme. Issues I&#39; like to address: Many of the functions are public for the sake of testing. I would like refactor all the test so that the modules only exposed required interfaces. The way this lib queries for total counts is a bit odd since it&#39;s trying to account for groub_by and multi sourced froms. I&#39;m going to see if we can&#39;t make this cleaner. The over all namespace of functions are in need of help. I will be refactoring a considerable amount of the functions. Pagination for Ecto and Phoenix. Dissolver is the continuation and fork of the fine work kerosene Out of respect to the authors of kerosene I won&#39;t be publishing this on https://hex.pm/ untill and if this becomes the replacement for kerosene. Until then you will need to install this from github.","ref":"readme.html","title":"Dissolver","type":"extras"},{"doc":"add Dissolver to your mix.exs dependencies: def deps do [ {:dissolver, github: &#39;MorphicPro/dissolver&#39;} ] end Next provide Dissolver your Repo module via the config. Add the following to your config: ... config :dissolver, repo: MyApp.Repo per_page: 2 import_config &quot;\\\#{Mix.env()}.exs&quot; For more information about the configuration options look at the Configurations section Now you are ready to start using Dissolver.","ref":"readme.html#installation","title":"Dissolver - Installation","type":"extras"},{"doc":"Start paginating your queries def index(conn, params) do {products, paginator} = Product |&gt; Product.with_lowest_price |&gt; Dissolver.paginate(params) render(conn, &quot;index.html&quot;, products: products, paginator: paginator) end Add the view helper to your view defmodule MyApp.ProductView do use MyApp.Web, :view import Dissolver.HTML end Generate the links using the view helper in your template &lt;%= paginate @conn, @paginator %&gt; Importing Dissolver.HTML provides your template access to Dissolver.HTML.paginate/3 as the prior example shows. The Dissolver.HTML.paginate/3 can take a host of options to aid the theme from how many links to show (window: integer) to what the link labels should read. By default the theme used to generate the html is the Dissolver.HTML.Simple theme. It will only provide the very basic prev|next buttons. For more theme options, including providing your own, read the following Configurations","ref":"readme.html#usage","title":"Dissolver - Usage","type":"extras"},{"doc":"This module uses the following that can be set as globals in your config/config.ex configurations :repo - Required Your app&#39;s Ecto Repo :theme (default: Dissolver.HTML.Simple) - A module that implements the Dissolver.HTML.Theme behavior There are a few pre defiend theme modules found in dessolver/html/ Dissolver.HTML.Simple - This is the default with only previous | next links Dissolver.HTML.Bootstrap - A Bootstrap 4 theme Dissolver.HTML.Foundation - A Foundation theme Dissolver.HTML.Materialize - A Materialize theme Dissolver.HTML.Semantic - A Semantic UI theme Dissolver.HTML.Tailwind - A Tailwind CSS theme :per_page (default: 10) - The global per page setting :max_page - The limit of pages allow to navigate regardless of total pages found This option is ignored if not provided and defaults to total pages found in the query. :lazy (default: false) - This option if enabled will result in all Dissolver.paginate/3 calls return an Ecto.Query rather than call Repo.all. This is useful for when you need to paginate on an association via a preload. TODO: provide example. ## Building apis or SPA&#39;s, no problem Dissolver has support for Json. defmodule MyApp.ProductView do use MyApp.Web, :view import Dissolver.JSON def render(&quot;index.json&quot;, %{products: products, dissolver: dissolver, conn: conn}) do %{data: render_many(products, MyApp.ProductView, &quot;product.json&quot;), pagination: paginate(conn, dissolver)} end def render(&quot;product.json&quot;, %{product: product}) do %{id: product.id, name: product.name, description: product.description, price: product.price} end end You can also send in options to paginate helper look at the docs for more details.","ref":"readme.html#configuration","title":"Dissolver - Configuration","type":"extras"},{"doc":"If you can start by writing an issue ticket. Then if you like feel free to fork and submit a PR for review.","ref":"readme.html#contributing","title":"Dissolver - Contributing","type":"extras"},{"doc":"I would like to Thank Matt (@mgwidmann) Drew Olson (@drewolson) Akira Matsuda (@amatsuda)","ref":"readme.html#acknowledgement","title":"Dissolver - Acknowledgement","type":"extras"},{"doc":"Please take a look at LICENSE.md","ref":"readme.html#license","title":"Dissolver - License","type":"extras"}]